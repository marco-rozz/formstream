// Code generated by MockGen. DO NOT EDIT.
// Source: parse.go

// Package mock is a generated GoMock package.
package mock

import (
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockiHookSatisfactionChecker is a mock of iHookSatisfactionChecker interface.
type MockiHookSatisfactionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockiHookSatisfactionCheckerMockRecorder
}

// MockiHookSatisfactionCheckerMockRecorder is the mock recorder for MockiHookSatisfactionChecker.
type MockiHookSatisfactionCheckerMockRecorder struct {
	mock *MockiHookSatisfactionChecker
}

// NewMockiHookSatisfactionChecker creates a new mock instance.
func NewMockiHookSatisfactionChecker(ctrl *gomock.Controller) *MockiHookSatisfactionChecker {
	mock := &MockiHookSatisfactionChecker{ctrl: ctrl}
	mock.recorder = &MockiHookSatisfactionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiHookSatisfactionChecker) EXPECT() *MockiHookSatisfactionCheckerMockRecorder {
	return m.recorder
}

// runOrSetHook mocks base method.
func (m *MockiHookSatisfactionChecker) runOrSetHook(name string, part *multipart.Part) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "runOrSetHook", name, part)
	ret0, _ := ret[0].(error)
	return ret0
}

// runOrSetHook indicates an expected call of runOrSetHook.
func (mr *MockiHookSatisfactionCheckerMockRecorder) runOrSetHook(name, part interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "runOrSetHook", reflect.TypeOf((*MockiHookSatisfactionChecker)(nil).runOrSetHook), name, part)
}

// runSatisfiedHook mocks base method.
func (m *MockiHookSatisfactionChecker) runSatisfiedHook(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "runSatisfiedHook", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// runSatisfiedHook indicates an expected call of runSatisfiedHook.
func (mr *MockiHookSatisfactionCheckerMockRecorder) runSatisfiedHook(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "runSatisfiedHook", reflect.TypeOf((*MockiHookSatisfactionChecker)(nil).runSatisfiedHook), name)
}
